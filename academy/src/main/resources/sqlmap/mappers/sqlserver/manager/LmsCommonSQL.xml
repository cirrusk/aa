<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="amway.com.academy.lms.common.service.impl.LmsCommonMapper">	
	<!-- 공통코드 리스트 -->
	<select id="selectLmsCommonCodeList" parameterType="reqBox" resultType="dataBox">
		/* selectLmsCommonCodeList */
		SELECT
			COMMONCODESEQ ,
			CODENAME
		FROM COMMONCODE
		WHERE USEYN = 'Y'
			AND CODEMASTERSEQ = #{codemasterseq}
		ORDER BY CODEORDER ASC
	</select>
	
	<select id="selectLmsCategoryCodeList" parameterType="reqBox" resultType="dataBox">
		/* selectLmsCategoryCodeList */
		SELECT
			CATEGORYID ,
			CATEGORYNAME ,
			CATEGORYLEVEL 
		FROM LMSCATEGORY
		WHERE USEFLAG = 'Y'
			AND CATEGORYTYPE = #{categorytype}
		 	AND CATEGORYUPID = #{categoryid}
		ORDER BY CATEGORYORDER ASC
	</select>
	
	<select id="selectLmsCategoryCode3Depth" parameterType="reqBox" resultType="dataBox">
		/* selectLmsCategoryCode3Depth */
		WITH TREE_QUERY  AS (
			SELECT  
				CATEGORYID ,
				CATEGORYUPID ,
				CATEGORYNAME ,
				CATEGORYLEVEL
			FROM LMSCATEGORY
			WHERE CATEGORYID = #{categoryid}
			UNION ALL 
			SELECT
				B.CATEGORYID ,
				B.CATEGORYUPID ,
				B.CATEGORYNAME ,
				B.CATEGORYLEVEL
			FROM  LMSCATEGORY B, TREE_QUERY C
			WHERE B.CATEGORYID = C.CATEGORYUPID
		) 
		SELECT 
			MAX(CASE WHEN CATEGORYLEVEL = '1' THEN CATEGORYID ELSE NULL END) CATEGORYID1 ,
			MAX(CASE WHEN CATEGORYLEVEL = '2' THEN CATEGORYID ELSE NULL END) CATEGORYID2 ,
			MAX(CASE WHEN CATEGORYLEVEL = '3' THEN CATEGORYID ELSE NULL END) CATEGORYID3
		FROM TREE_QUERY 
	</select>
	
	<select id="selectLmsApCodeList" parameterType="reqBox" resultType="dataBox">
		/* selectLmsApCodeList */
		SELECT 
			PPSEQ AS APSEQ ,
			PPNAME AS APNAME
		FROM RSVPPINFO
		WHERE STATUSCODE = 'B01'
		ORDER BY ORDERNUMBER ASC
	</select>
	
	<select id="selectLmsRoomCodeList" parameterType="reqBox" resultType="dataBox">
		/* selectLmsRoomCodeList */
		SELECT ROOMSEQ ,
			ROOMNAME 
		FROM RSVROOMINFO
		WHERE STATUSCODE = 'B01'
			<if test='apseq != null and !apseq.equals("")'>
			AND PPSEQ = #{ apseq}
			</if>
		ORDER BY ROOMNAME ASC
	</select>
	
	<select id="selectLmsLogin" parameterType="reqBox" resultType="dataBox">
		/* selectLmsLogin */
		SELECT
			UID ,
			NAME , 
			CUSTOMERGUBUN  AS ABOTYPECODE , /* 회원구분 */
			ISNULL((SELECT TARGETCODEORDER FROM TARGETCODE WHERE TARGETMASTERSEQ='ABOTYPE' AND TARGETCODESEQ = A.CUSTOMERGUBUN ), 1) AS ABOTYPEORDER ,/* 회원순서 */
			GROUPS AS PINCODE , /* 핀레벨 */
			ISNULL((SELECT TARGETCODEORDER FROM TARGETCODE WHERE TARGETMASTERSEQ='PINCODE' AND TARGETCODESEQ = A.GROUPS), 1) AS PINORDER , /* 핀레벨순서 */
			DBO.F_LMS_AGE(SSN, PARTNERINFOSSN) AS AGEORDER , /* 나이 */
			LOAGROUP AS LOACODE , /* LOA코드 */
			QUALIFYDIA AS DIACODE,  /* DIA코드 */
			CREATIONTIME /* 가입일자 */
		FROM MEMBER A
		WHERE UID = #{uid }
	</select>
	
	<select id="selectLmsDW" parameterType="reqBox" resultType="dataBox">
		/* selectLmsDW */
		SELECT
			ISNULL((SELECT TARGETCODESEQ FROM TARGETCODE WHERE TARGETMASTERSEQ = 'BONUSCODE' AND CASEONE = A.BONUSCODE),'') AS BONUSCODE
			, ISNULL((SELECT TARGETCODEORDER FROM TARGETCODE WHERE TARGETMASTERSEQ ='BONUSCODE' AND CASEONE = A.BONUSCODE ), 0) AS BONUSORDER
			, ISNULL((SELECT TARGETCODESEQ FROM TARGETCODE WHERE TARGETMASTERSEQ = 'CUSTOMERCODE' AND CASEONE = A.CUSTOMERCODE),'N/A') AS CUSTOMERCODE
			, ISNULL((SELECT TARGETCODESEQ FROM TARGETCODE WHERE TARGETMASTERSEQ = 'CONSECUTIVECODE' AND CASEONE = 
				( CASE WHEN A.CONSECUTIVECODE_CNT <![CDATA[ >= ]]> 2 THEN '2회'
					WHEN A.CONSECUTIVECODE_CNT = 1 THEN '1회'
					WHEN A.CONSECUTIVECODE_CNT = 0 THEN '0회'
					END
				)
			),'N/A') AS CONSECUTIVECODE
			, CASE WHEN A.BUSINESSSTATUSCODE1 = 'Y' THEN 'BUSINESSSTATUSCODE01' ELSE 'N/A' END AS BUSINESSSTATUSCODE1
			, CASE WHEN A.BUSINESSSTATUSCODE2 = 'Y' THEN 'BUSINESSSTATUSCODE02' ELSE 'N/A' END AS BUSINESSSTATUSCODE2
			, CASE WHEN A.BUSINESSSTATUSCODE3 = 'Y' THEN 'BUSINESSSTATUSCODE03' ELSE 'N/A' END AS BUSINESSSTATUSCODE3
			, CASE WHEN A.BUSINESSSTATUSCODE4 = 'Y' THEN 'BUSINESSSTATUSCODE04' ELSE 'N/A' END AS BUSINESSSTATUSCODE4
		FROM (
			SELECT
				TOP 1
				BONUSCODE
				, CUSTOMERCODE
				, (
					CASE WHEN ISNULL(CONSECUTIVECODE0,'0') <![CDATA[ <> ]]> '0' THEN 1 ELSE 0 END + 
					CASE WHEN ISNULL(CONSECUTIVECODE1,'0') <![CDATA[ <> ]]> '0' THEN 1 ELSE 0 END + 
					CASE WHEN ISNULL(CONSECUTIVECODE2,'0') <![CDATA[ <> ]]> '0' THEN 1 ELSE 0 END +
					CASE WHEN ISNULL(CONSECUTIVECODE3,'0') <![CDATA[ <> ]]> '0' THEN 1 ELSE 0 END +
					CASE WHEN ISNULL(CONSECUTIVECODE4,'0') <![CDATA[ <> ]]> '0' THEN 1 ELSE 0 END +
					CASE WHEN ISNULL(CONSECUTIVECODE5,'0') <![CDATA[ <> ]]> '0' THEN 1 ELSE 0 END
				) AS CONSECUTIVECODE_CNT
				, ISNULL(BUSINESSSTATUSCODE1,'') BUSINESSSTATUSCODE1
				, ISNULL(BUSINESSSTATUSCODE2,'') BUSINESSSTATUSCODE2
				, ISNULL(BUSINESSSTATUSCODE3,'') BUSINESSSTATUSCODE3
				, ISNULL(BUSINESSSTATUSCODE4,'') BUSINESSSTATUSCODE4
			FROM MEMBERDW
			WHERE UID = #{uid }
			AND DWMONTH <![CDATA[ <= ]]> FORMAT(GETDATE(),'yyyyMM')
			ORDER BY DWMONTH DESC
		) A
	</select>

	<update id="updatetLmsStepFinish" parameterType="reqBox">
		/* updatetLmsStepFinish */
		UPDATE LMSSTEPFINISH SET
			FINISHFLAG = CASE WHEN FINISHFLAG = 'Y' THEN 'Y' ELSE (
				SELECT
					CASE WHEN AA.MUSTFLAG = 'N' THEN 'Y' ELSE
						CASE WHEN AA.MUSTCOUNT <![CDATA[ > ]]> AA.MUSTFISNISHCOUNT THEN 'N' ELSE
							CASE WHEN AA.STEPCOUNT <![CDATA[ > ]]> AA.TOTALFINISHCOUNT THEN 'N' ELSE 'Y' END
						END
					END FINISHFLAG
				FROM (	
					SELECT
						A.MUSTFLAG
						, A.STEPCOUNT
						, ( SELECT COUNT(*) FROM LMSSTEPUNIT WHERE COURSEID = A.COURSEID AND STEPSEQ = A.STEPSEQ AND MUSTFLAG = 'Y' ) MUSTCOUNT
						, (
							SELECT COUNT(*)
							FROM LMSSTEPUNIT A INNER JOIN LMSSTUDENT B
							ON A.STEPCOURSEID = B.COURSEID
							WHERE A.COURSEID = #{courseid}
							AND A.STEPSEQ = #{stepseq}
							AND B.UID = #{uid}
							AND A.MUSTFLAG = 'Y'
							AND B.FINISHFLAG = 'Y'
						) AS MUSTFISNISHCOUNT
						, (
							SELECT COUNT(*)
							FROM LMSSTEPUNIT A INNER JOIN LMSSTUDENT B
							ON A.STEPCOURSEID = B.COURSEID
							WHERE A.COURSEID = #{courseid}
							AND A.STEPSEQ = #{stepseq}
							AND B.UID = #{uid}
							AND B.FINISHFLAG = 'Y'
						) AS TOTALFINISHCOUNT
					FROM LMSSTEP A 
					WHERE A.COURSEID = #{courseid}
					AND A.STEPSEQ = #{stepseq}
				) AA
			) END
		WHERE COURSEID = #{courseid}
		AND STEPSEQ = #{stepseq}
		AND UID = #{uid}
	</update>
	
	<update id="updatetLmsTotalFinish" parameterType="reqBox">
		/* updatetLmsTotalFinish */
		UPDATE LMSSTUDENT SET
			FINISHDATE = GETDATE()
			, FINISHFLAG = ISNULL((
				SELECT
					CASE WHEN AA.FINISHFLAG = 'Y' THEN 'Y' ELSE 
						CASE WHEN AA.STEPCOUNT <![CDATA[ <= ]]> AA.FINISHCOUNT THEN 'Y' ELSE 'N' END
					END
				FROM (
					SELECT
						FINISHFLAG
						, (
							SELECT COUNT(*) STEPCOUNT
							FROM LMSSTEP
							WHERE COURSEID = #{courseid}
						) STEPCOUNT
						, (
							SELECT COUNT(*)
							FROM LMSSTEPFINISH
							WHERE COURSEID = #{courseid}
							AND UID = #{uid}
							AND FINISHFLAG = 'Y'
						) FINISHCOUNT
					FROM LMSSTUDENT
					WHERE COURSEID = #{courseid}
					AND UID = #{uid}
				) AA
			),'N') 
		WHERE COURSEID = #{courseid}
		AND UID = #{uid}
	</update>
	
	<update id="mergeSnsShareCount" parameterType="reqBox">
		/* mergeSnsShareCount */
		MERGE LMSVIEWLOG AS A
		USING (SELECT #{courseid} AS COURSEID, '1' AS VIEWTYPE, FORMAT(GETDATE(), 'yyyyMM') AS VIEWMONTH, CONVERT(VARCHAR(13), #{uid} ) AS UID) AS B
		ON (A.COURSEID=B.COURSEID AND A.VIEWTYPE=B.VIEWTYPE AND A.VIEWMONTH=B.VIEWMONTH AND A.UID = B.UID)
		WHEN NOT MATCHED THEN
		INSERT (COURSEID, VIEWTYPE, VIEWMONTH, UID, VIEWCOUNT) VALUES (B.COURSEID, B.VIEWTYPE, B.VIEWMONTH, B.UID ,1)
		WHEN MATCHED THEN
		UPDATE SET A.VIEWCOUNT = A.VIEWCOUNT + 1 ;
	</update>
	
	<update id="mergeViewCourseCount" parameterType="reqBox">
		/* mergeSnsShareCount */
		MERGE LMSVIEWLOG AS A
		USING (SELECT #{courseid} AS COURSEID, '3' AS VIEWTYPE, FORMAT(GETDATE(), 'yyyyMM') AS VIEWMONTH, CONVERT(VARCHAR(13), #{uid} ) AS UID) AS B
		ON (A.COURSEID=B.COURSEID AND A.VIEWTYPE=B.VIEWTYPE AND A.VIEWMONTH=B.VIEWMONTH AND A.UID = B.UID)
		WHEN NOT MATCHED THEN
		INSERT (COURSEID, VIEWTYPE, VIEWMONTH, UID, VIEWCOUNT) VALUES (B.COURSEID, B.VIEWTYPE, B.VIEWMONTH, B.UID ,1)
		WHEN MATCHED THEN
		UPDATE SET A.VIEWCOUNT = A.VIEWCOUNT + 1 ;
	</update>
	
	<update id="updateCourseViewCount" parameterType="reqBox">
		/* updateCourseViewCount */
		UPDATE LMSCOURSE SET VIEWCOUNT = VIEWCOUNT + 1 WHERE COURSEID = #{courseid} 
	</update>
	
	
	<insert id="insertLmsconnectStamp" parameterType="reqBox">
		/* insertLmsconnectStamp */
		EXEC DBO.SP_LMS_STAMPCONNECT #{uid}, #{stampid4}, #{stampid12}, #{stampid24}, #{stampid48}, ''
	</insert>
	
	<insert id="insertLmsStamp" parameterType="reqBox">
		/* insertLmsStamp */
		<if test='stampid.equals("6")'>
		EXEC DBO.SP_LMS_STAMPOFFLINE #{uid}, #{stampid}, ''
		</if>
		<if test='stampid.equals("7")'>
		EXEC DBO.SP_LMS_STAMPDATA #{uid}, #{stampid}, ''
		</if>
		<if test='stampid.equals("8")'>
		EXEC DBO.SP_LMS_STAMPVIEWLOG #{uid}, #{stampid}, ''
		</if>
	</insert>
	
	<insert id="insertLmsStampSns" parameterType="reqBox">
		/* insertLmsStampSns */
		<if test='stampid.equals("8")'>
		EXEC DBO.SP_LMS_STAMPSNS #{courseid}, #{uid}, #{stampid}, ''
		</if>
	</insert>
	
	<insert id="insertLmsRegularStamp" parameterType="reqBox">
		/* insertLmsRegularStamp */
		EXEC DBO.SP_LMS_STAMPREGULAR #{uid}, #{courseid}, ''
	</insert>
	
	
	
	<!-- 쪽지발신 등록-->
	    <!-- 
	    <selectKey resultType="int" keyProperty="notesendseq" order="BEFORE">
	        SELECT ISNULL(MAX(NOTESENDSEQ),0)+1 AS NOTESENDSEQ FROM NOTESEND        
	    </selectKey> 
				NOTESENDSEQ ,
				(SELECT ISNULL(MAX(NOTESENDSEQ),0)+1 AS NOTESENDSEQ FROM NOTESEND) ,
	     -->
 	<insert id="insertLmsNoteSend" parameterType="java.util.Map">
		/* LmsCommonSQL.xml insertLmsNoteSend */
			INSERT INTO NOTESEND(
				NOTESERVICE ,
				NAME ,
				UID ,
				NOTEITEM ,
				NOTECONTENT ,
				SENDDATE ,
				MODIFIER ,
				MODIFYDATE ,
				REGISTRANT ,
				REGISTRANTDATE ,
				DELETEYN 
				)
			VALUES(
				#{noteservice } ,
				#{name } ,
				#{uid } ,
				#{noteitem } ,
				#{notecontent } ,
		<choose>
			<when test='senddate != null and senddate.equals("now")'>
				GETDATE() ,
			</when>
			<otherwise>
				#{senddate } ,
			</otherwise>
		</choose>
				#{modifier } ,
				GETDATE() ,
				#{registrant } ,
				GETDATE() ,
				'N' 
				)
	</insert>
	
	<select id="selectNowDate" parameterType="reqBox" resultType="dataBox">
		/* selectNowDate */
		SELECT DBO.F_LMS_DATETYPE(GETDATE(), '3') AS NOWDATE
	</select>
	
	<select id="selectLmsMemberInfo" parameterType="reqBox" resultType="dataBox">
		/* LmsCommonSQL.xml selectLmsMemberInfo 회원정보 잃기*/
		SELECT
			*
		FROM MEMBER A
		WHERE UID = #{uid }
	</select>
	
	
	<select id="selectLmsCourseDataFileInfo" parameterType="reqBox" resultType="dataBox">
		/* LmsCommonSQL.xml selectLmsCourseDataFileInfo 교육자료 첨부파일 잃기*/
			SELECT
				FILEDOWN, 
				SUBSTRING(FILEDOWN, 1, CHARINDEX('|', FILEDOWN) - CASE WHEN CHARINDEX('|', filedown) > 0 THEN 1 ELSE 0 END) AS NAME,
				SUBSTRING(FILEDOWN, CHARINDEX('|', FILEDOWN) + CASE WHEN CHARINDEX('|', filedown) > 0 THEN 1 ELSE 0 END, 500) AS FILENAME
			FROM LMSDATA
			WHERE COURSEID = #{courseid }
	</select>
	
	<!-- AmwayGo 그룹방 동기화 procedure -->
	<insert id="lmsAmwayGoDataSynch" parameterType="reqBox">
	/*lmsAmwayGoDataSynch*/
	EXEC DBO.SP_AMWAYGO_LMS #{uid}, #{courseid}
	</insert>
	
	
</mapper>